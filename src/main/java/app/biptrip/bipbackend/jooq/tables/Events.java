/*
 * This file is generated by jOOQ.
 */
package app.biptrip.bipbackend.jooq.tables;


import app.biptrip.bipbackend.jooq.Keys;
import app.biptrip.bipbackend.jooq.Public;
import app.biptrip.bipbackend.jooq.tables.Tickets.TicketsPath;
import app.biptrip.bipbackend.jooq.tables.records.EventsRecord;

import java.time.LocalDateTime;
import java.util.Collection;

import org.jooq.Condition;
import org.jooq.Field;
import org.jooq.ForeignKey;
import org.jooq.Identity;
import org.jooq.InverseForeignKey;
import org.jooq.Name;
import org.jooq.Path;
import org.jooq.PlainSQL;
import org.jooq.QueryPart;
import org.jooq.Record;
import org.jooq.SQL;
import org.jooq.Schema;
import org.jooq.Select;
import org.jooq.Stringly;
import org.jooq.Table;
import org.jooq.TableField;
import org.jooq.TableOptions;
import org.jooq.UniqueKey;
import org.jooq.impl.DSL;
import org.jooq.impl.SQLDataType;
import org.jooq.impl.TableImpl;


/**
 * This class is generated by jOOQ.
 */
@SuppressWarnings({ "all", "unchecked", "rawtypes", "this-escape" })
public class Events extends TableImpl<EventsRecord> {

    private static final long serialVersionUID = 1L;

    /**
     * The reference instance of <code>public.events</code>
     */
    public static final Events EVENTS = new Events();

    /**
     * The class holding records for this type
     */
    @Override
    public Class<EventsRecord> getRecordType() {
        return EventsRecord.class;
    }

    /**
     * The column <code>public.events.id</code>.
     */
    public final TableField<EventsRecord, Integer> ID = createField(DSL.name("id"), SQLDataType.INTEGER.nullable(false).identity(true), this, "");

    /**
     * The column <code>public.events.title</code>.
     */
    public final TableField<EventsRecord, String> TITLE = createField(DSL.name("title"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.events.description</code>.
     */
    public final TableField<EventsRecord, String> DESCRIPTION = createField(DSL.name("description"), SQLDataType.CLOB, this, "");

    /**
     * The column <code>public.events.location</code>.
     */
    public final TableField<EventsRecord, String> LOCATION = createField(DSL.name("location"), SQLDataType.VARCHAR(255), this, "");

    /**
     * The column <code>public.events.price</code>.
     */
    public final TableField<EventsRecord, Integer> PRICE = createField(DSL.name("price"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.events.tickets_available</code>.
     */
    public final TableField<EventsRecord, Integer> TICKETS_AVAILABLE = createField(DSL.name("tickets_available"), SQLDataType.INTEGER, this, "");

    /**
     * The column <code>public.events.start_time</code>.
     */
    public final TableField<EventsRecord, LocalDateTime> START_TIME = createField(DSL.name("start_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.events.end_time</code>.
     */
    public final TableField<EventsRecord, LocalDateTime> END_TIME = createField(DSL.name("end_time"), SQLDataType.LOCALDATETIME(6), this, "");

    /**
     * The column <code>public.events.image_url</code>.
     */
    public final TableField<EventsRecord, String> IMAGE_URL = createField(DSL.name("image_url"), SQLDataType.VARCHAR(255), this, "");

    private Events(Name alias, Table<EventsRecord> aliased) {
        this(alias, aliased, (Field<?>[]) null, null);
    }

    private Events(Name alias, Table<EventsRecord> aliased, Field<?>[] parameters, Condition where) {
        super(alias, null, aliased, parameters, DSL.comment(""), TableOptions.table(), where);
    }

    /**
     * Create an aliased <code>public.events</code> table reference
     */
    public Events(String alias) {
        this(DSL.name(alias), EVENTS);
    }

    /**
     * Create an aliased <code>public.events</code> table reference
     */
    public Events(Name alias) {
        this(alias, EVENTS);
    }

    /**
     * Create a <code>public.events</code> table reference
     */
    public Events() {
        this(DSL.name("events"), null);
    }

    public <O extends Record> Events(Table<O> path, ForeignKey<O, EventsRecord> childPath, InverseForeignKey<O, EventsRecord> parentPath) {
        super(path, childPath, parentPath, EVENTS);
    }

    /**
     * A subtype implementing {@link Path} for simplified path-based joins.
     */
    public static class EventsPath extends Events implements Path<EventsRecord> {

        private static final long serialVersionUID = 1L;
        public <O extends Record> EventsPath(Table<O> path, ForeignKey<O, EventsRecord> childPath, InverseForeignKey<O, EventsRecord> parentPath) {
            super(path, childPath, parentPath);
        }
        private EventsPath(Name alias, Table<EventsRecord> aliased) {
            super(alias, aliased);
        }

        @Override
        public EventsPath as(String alias) {
            return new EventsPath(DSL.name(alias), this);
        }

        @Override
        public EventsPath as(Name alias) {
            return new EventsPath(alias, this);
        }

        @Override
        public EventsPath as(Table<?> alias) {
            return new EventsPath(alias.getQualifiedName(), this);
        }
    }

    @Override
    public Schema getSchema() {
        return aliased() ? null : Public.PUBLIC;
    }

    @Override
    public Identity<EventsRecord, Integer> getIdentity() {
        return (Identity<EventsRecord, Integer>) super.getIdentity();
    }

    @Override
    public UniqueKey<EventsRecord> getPrimaryKey() {
        return Keys.EVENTS_PKEY;
    }

    private transient TicketsPath _tickets;

    /**
     * Get the implicit to-many join path to the <code>public.tickets</code>
     * table
     */
    public TicketsPath tickets() {
        if (_tickets == null)
            _tickets = new TicketsPath(this, null, Keys.TICKETS__FK_EVENT.getInverseKey());

        return _tickets;
    }

    @Override
    public Events as(String alias) {
        return new Events(DSL.name(alias), this);
    }

    @Override
    public Events as(Name alias) {
        return new Events(alias, this);
    }

    @Override
    public Events as(Table<?> alias) {
        return new Events(alias.getQualifiedName(), this);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(String name) {
        return new Events(DSL.name(name), null);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(Name name) {
        return new Events(name, null);
    }

    /**
     * Rename this table
     */
    @Override
    public Events rename(Table<?> name) {
        return new Events(name.getQualifiedName(), null);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Events where(Condition condition) {
        return new Events(getQualifiedName(), aliased() ? this : null, null, condition);
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Events where(Collection<? extends Condition> conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Events where(Condition... conditions) {
        return where(DSL.and(conditions));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Events where(Field<Boolean> condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Events where(SQL condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Events where(@Stringly.SQL String condition) {
        return where(DSL.condition(condition));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Events where(@Stringly.SQL String condition, Object... binds) {
        return where(DSL.condition(condition, binds));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    @PlainSQL
    public Events where(@Stringly.SQL String condition, QueryPart... parts) {
        return where(DSL.condition(condition, parts));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Events whereExists(Select<?> select) {
        return where(DSL.exists(select));
    }

    /**
     * Create an inline derived table from this table
     */
    @Override
    public Events whereNotExists(Select<?> select) {
        return where(DSL.notExists(select));
    }
}
